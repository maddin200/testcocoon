#line 2 "c_cs_cpp_parser_lex_debug.cxx"

#line 4 "c_cs_cpp_parser_lex_debug.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer c_cs_cpp_parser_create_buffer
#define yy_delete_buffer c_cs_cpp_parser_delete_buffer
#define yy_flex_debug c_cs_cpp_parser_flex_debug
#define yy_init_buffer c_cs_cpp_parser_init_buffer
#define yy_flush_buffer c_cs_cpp_parser_flush_buffer
#define yy_load_buffer_state c_cs_cpp_parser_load_buffer_state
#define yy_switch_to_buffer c_cs_cpp_parser_switch_to_buffer
#define yyin c_cs_cpp_parserin
#define yyleng c_cs_cpp_parserleng
#define yylex c_cs_cpp_parserlex
#define yylineno c_cs_cpp_parserlineno
#define yyout c_cs_cpp_parserout
#define yyrestart c_cs_cpp_parserrestart
#define yytext c_cs_cpp_parsertext
#define yywrap c_cs_cpp_parserwrap
#define yyalloc c_cs_cpp_parseralloc
#define yyrealloc c_cs_cpp_parserrealloc
#define yyfree c_cs_cpp_parserfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE c_cs_cpp_parserrestart(c_cs_cpp_parserin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int c_cs_cpp_parserleng;

extern FILE *c_cs_cpp_parserin, *c_cs_cpp_parserout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up c_cs_cpp_parsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up c_cs_cpp_parsertext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via c_cs_cpp_parserrestart()), so that the user can continue scanning by
	 * just pointing c_cs_cpp_parserin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when c_cs_cpp_parsertext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int c_cs_cpp_parserleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow c_cs_cpp_parserwrap()'s to do buffer switches
 * instead of setting up a fresh c_cs_cpp_parserin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void c_cs_cpp_parserrestart (FILE *input_file  );
void c_cs_cpp_parser_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE c_cs_cpp_parser_create_buffer (FILE *file,int size  );
void c_cs_cpp_parser_delete_buffer (YY_BUFFER_STATE b  );
void c_cs_cpp_parser_flush_buffer (YY_BUFFER_STATE b  );
void c_cs_cpp_parserpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void c_cs_cpp_parserpop_buffer_state (void );

static void c_cs_cpp_parserensure_buffer_stack (void );
static void c_cs_cpp_parser_load_buffer_state (void );
static void c_cs_cpp_parser_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER c_cs_cpp_parser_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE c_cs_cpp_parser_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE c_cs_cpp_parser_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE c_cs_cpp_parser_scan_bytes (yyconst char *bytes,int len  );

void *c_cs_cpp_parseralloc (yy_size_t  );
void *c_cs_cpp_parserrealloc (void *,yy_size_t  );
void c_cs_cpp_parserfree (void *  );

#define yy_new_buffer c_cs_cpp_parser_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        c_cs_cpp_parserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            c_cs_cpp_parser_create_buffer(c_cs_cpp_parserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        c_cs_cpp_parserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            c_cs_cpp_parser_create_buffer(c_cs_cpp_parserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *c_cs_cpp_parserin = (FILE *) 0, *c_cs_cpp_parserout = (FILE *) 0;

typedef int yy_state_type;

extern int c_cs_cpp_parserlineno;

int c_cs_cpp_parserlineno = 1;

extern char *c_cs_cpp_parsertext;
#define yytext_ptr c_cs_cpp_parsertext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up c_cs_cpp_parsertext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	c_cs_cpp_parserleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[384] =
    {   0,
        9,    9,   72,   71,   70,   71,   68,   70,   71,   69,
       71,   35,   70,   71,   70,   71,   64,   70,   71,   70,
       71,   70,   71,   50,   70,   71,   51,   70,   71,   70,
       71,   64,   70,   71,   59,   70,   71,   64,   70,   71,
       70,   71,   64,   70,   71,   24,   70,   71,   24,   70,
       71,   32,   70,   71,   33,   70,   71,   40,   70,   71,
       34,   70,   71,   41,   70,   71,   60,   70,   71,   70,
       71,   66,   70,   71,   66,   70,   71,   52,   70,   71,
       54,   70,   71,   64,   70,   71,   66,   70,   71,   57,
       70,   71,   70,   71,   58,   70,   71,   70,   71,   70,

       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   68,   70,   71,
        2,   70,   71,   32,   70,   71,   66,   70,   71,    9,
       10,   71,    9,   10,   71,    3,   71,   10,   71,    7,
        9,   10,   71,    9,   10,   71,    9,   10,   71,    9,
       10,   71,    9,   10,   71,   66,   70,   71,   14,   71,
       12,   71,   14,   71,   17,   71,   16,   71,   68,   46,
       29,   47,   58,   30,   62,   63,   39,   27,   11,   15,
       28,   23,   24,   24,   24,   54,   57,   37,   44,   42,
       36,   45,   38,   43,   67,   66,   55,   66,   66,   66,

       31,   20,   66,   68,    2,    2,   61,   66,    9,    9,
        7,    9,    7,    7,    9,    7,    7,    9,    9,    9,
        9,    9,   66,   13,   25,   27,   27,   27,   28,   28,
       28,   23,   24,   26,   22,   53,   48,   49,   67,   66,
       66,   66,   66,   66,   20,   66,   65,   66,    7,    9,
        9,    9,    9,   66,   27,   27,   28,   27,   28,   28,
       26,   26,   22,   67,   66,   66,   66,   66,   66,   66,
       66,   20,   66,    9,    9,    9,    9,   27,   28,   67,
       66,   66,   66,   66,   66,   66,   20,   66,    9,    9,
        9,   66,   66,   66,   66,   66,   66,   66,    9,    8,

        9,    5,    9,   18,   66,   66,   66,   66,   66,   66,
       66,    9,    8,    9,    8,    5,    9,    5,    9,   19,
       66,   66,   66,   66,   66,    9,    5,    9,   66,   66,
       66,   21,    6,    9,    5,    9,   66,   66,   66,   21,
       21,    5,    9,   66,   66,   66,    5,    9,   66,   66,
        5,    9,   66,    5,    9,   56,   66,    5,    9,    5,
        9,    5,    9,    5,    9,    5,    9,    5,    9,    5,
        9,    5,    9,    1,    4,    5,    9,    4,    1,    4,
        5,    9,    4
    } ;

static yyconst flex_int16_t yy_accept[439] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    7,   10,   12,
       15,   17,   20,   22,   24,   27,   30,   32,   35,   38,
       41,   43,   46,   49,   52,   55,   58,   61,   64,   67,
       70,   72,   75,   78,   81,   84,   87,   90,   93,   95,
       98,  100,  102,  104,  106,  108,  110,  112,  114,  116,
      118,  121,  124,  127,  130,  133,  136,  138,  140,  144,
      147,  150,  153,  156,  159,  161,  163,  165,  167,  169,
      170,  171,  171,  172,  172,  173,  174,  175,  175,  175,
      176,  177,  178,  179,  180,  181,  182,  184,  184,  185,

      185,  186,  187,  188,  188,  189,  190,  191,  192,  193,
      194,  195,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  198,  199,  200,  201,  202,  202,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  205,  206,
      207,  207,  208,  209,  210,  211,  211,  213,  214,  216,
      217,  219,  220,  221,  222,  223,  224,  225,  226,  226,
      227,  228,  230,  230,  231,  232,  234,  234,  235,  236,
      237,  238,  239,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      241,  242,  243,  244,  245,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  247,  248,  248,  248,  248,  248,  249,
      250,  251,  252,  253,  254,  255,  255,  256,  256,  258,
      260,  260,  261,  262,  263,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  265,  265,  265,  265,  266,
      266,  266,  266,  267,  268,  269,  270,  271,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  273,  273,

      273,  273,  273,  274,  275,  276,  277,  278,  278,  280,
      281,  281,  281,  281,  282,  283,  284,  285,  286,  287,
      288,  288,  288,  288,  288,  289,  290,  291,  292,  293,
      293,  294,  295,  296,  297,  298,  298,  299,  300,  302,
      304,  306,  306,  307,  308,  309,  310,  311,  311,  312,
      313,  315,  316,  318,  320,  320,  321,  322,  323,  324,
      325,  325,  325,  326,  327,  329,  329,  330,  331,  332,
      332,  332,  333,  333,  335,  337,  337,  338,  339,  340,
      340,  341,  342,  344,  344,  345,  346,  347,  347,  349,
      349,  350,  350,  350,  351,  351,  353,  353,  353,  353,

      354,  354,  356,  356,  356,  357,  358,  358,  360,  360,
      360,  362,  362,  362,  364,  364,  364,  366,  366,  366,
      368,  368,  368,  370,  370,  370,  372,  372,  372,  374,
      374,  375,  378,  379,  380,  383,  384,  384
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   30,   31,
       32,   32,   32,   32,   32,   33,   32,   32,   32,   34,
       32,   32,   35,   32,   36,   32,   32,   37,   32,   32,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   32,   50,   32,   32,   51,   52,   53,
       54,   55,   32,   56,   57,   58,   59,   60,   32,   61,
       32,   32,   62,   63,   64,   65,    1,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   69,   70,   70,   70,
       71,    1,    1,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   75,   76,   77,   78,
       79,   79,   79,   80,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[81] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    5,    5,    6,
        7,    7,    5,    5,    5,    5,    5,    5,    8,    8,
        9,    7,    5,    5,    5,    1,   10,   11,   11,   11,
       11,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        5,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    7,    5,    7,    5,    1,    1,    1,    1,    1,
        1,   12,   12,   12,   12,   12,   12,   12,   12,   12
    } ;

static yyconst flex_int16_t yy_base[464] =
    {   0,
        0,    0,    0,   79,   61,   83,   89,   92,   63,   99,
       85,   86, 1514, 1509, 1501, 1709, 1709,   98, 1709, 1405,
       91,   89, 1419, 1388, 1709, 1709, 1402,  102, 1709,   94,
      102,  110,  132,  137, 1400, 1709,  151, 1400,  107, 1709,
      125,  134,  154, 1383, 1709, 1398,  209, 1709, 1358, 1709,
      185,  154,  167,  178,   58,  200,  206,  211,  217, 1354,
      159,  125,  117,  140,    0,  287, 1709,  290,  292, 1366,
     1366, 1359, 1367,  175, 1709, 1709, 1395, 1709, 1709,  174,
     1709,  284, 1709, 1409, 1709, 1709, 1709,  283,  292, 1709,
     1709, 1709,  284, 1709, 1709,  306,  325,  327,  265,    0,

      332, 1709, 1709,    0, 1387, 1709, 1709, 1709, 1709, 1386,
     1709,  320,  319,  171,  335,  186,  341,  346,  352, 1343,
      176,  358,  250,  364,  233,  370,  375,  381, 1341,  291,
     1367, 1709,  447,  323,  448, 1709,  457,  390,  405,  409,
      415,  261,  421,  429,  438, 1339,  184,  444,  450,  456,
      472,  478,  483,  489,  495,  501,  507,  373,  577,  578,
     1348, 1709,  577,    0,  582,  586,  344,  340, 1399,    0,
      588, 1355, 1347, 1356, 1349,  450, 1709, 1709,  575, 1347,
     1709,  579,  597, 1346, 1709,  564,  351,  615,  585, 1709,
     1709, 1709,  577,  571,  590,  601,  315,  607,  612,  618,

     1329,  624,  630,  636,  642,  648,  653,  659,  665,  671,
      677,  683,  689,  695,  701,  706,  712,  718,  724,  790,
      791,  792,  797,  798,  737,  752,  756,  768,  435,  788,
      761,  794, 1328,  800,  806,  812,  818,  824,  829,  835,
      841,  847,  244, 1709,  853,  859,  865, 1350,  931,  584,
     1335, 1342, 1337, 1335,  932,  600,  920,  831, 1334, 1709,
      786,  924, 1333, 1709,  914,  892,  910,  924,  930,  916,
      936,  942,  948,  954,    0,  960,  966,  972,  637,  978,
      984,  990,  939, 1056, 1057, 1058, 1059, 1065, 1010, 1016,
     1022, 1028, 1037, 1043, 1051, 1057, 1063,    0, 1069, 1075,

     1081, 1333, 1147, 1334, 1152, 1328, 1325,  822, 1143,    0,
     1098, 1111, 1117, 1149, 1193, 1186, 1192, 1194, 1199,    0,
     1144, 1150, 1156, 1326, 1222, 1328, 1333, 1322, 1223,    0,
     1224, 1225, 1230, 1231, 1238, 1331, 1240, 1312, 1317,  214,
      942, 1299, 1241, 1247, 1248, 1249, 1254, 1259, 1259, 1242,
     1263,    0, 1185, 1266, 1269, 1709, 1266, 1269, 1271, 1272,
     1285, 1121, 1325, 1120,  610, 1116, 1293, 1294, 1299, 1101,
      336,    0, 1120,    0, 1202, 1041, 1306, 1301, 1312, 1027,
        0, 1709,  581, 1026, 1313, 1326, 1314, 1016,  252, 1014,
     1350, 1343,  957, 1351,  924,  451,  923,  952, 1306, 1359,

      907,  301,  905, 1368, 1709, 1361,  899, 1340,  805,  811,
      627,  809,  754, 1204,  580,  579, 1248,  550,  475,  592,
      314,  260, 1154,  139,  124, 1355,  111,   99, 1234,   79,
        0,    0,    0,    0,    0,    0, 1709, 1430, 1443, 1456,
     1469, 1482, 1495, 1498, 1503, 1514, 1526, 1539, 1545, 1556,
     1562, 1567, 1579, 1592, 1605, 1618, 1631, 1643,  102, 1656,
     1669, 1682, 1695
    } ;

static yyconst flex_int16_t yy_def[464] =
    {   0,
      438,  438,  437,    3,    3,    3,  439,  439,    3,    3,
      440,  440,  441,  441,  437,  437,  437,  437,  437,  437,
      442,  437,  437,  443,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      444,  445,  445,  437,  437,  437,   43,  437,  437,  437,
      446,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,   43,  447,  447,  437,  437,  448,  447,
      447,  447,  447,   43,  437,  437,  437,  437,  437,  437,
      437,  442,  437,  442,  437,  437,  437,  443,  443,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  449,

      437,  437,  437,  450,  437,  437,  437,  437,  437,  437,
      437,  451,  437,  437,  437,  437,  437,  437,  437,  437,
       43,  437,  437,  437,  437,  437,  437,  437,  437,  442,
      443,  437,   43,   43,   43,  437,  446,  452,  437,  437,
      437,  437,  437,  437,  437,  437,   43,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,   43,  447,  447,  437,  448,  453,  448,  453,
      448,  447,  447,  447,  447,   43,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  449,  437,
      437,  437,  451,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,   43,
       43,   43,   43,   43,  452,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,   43,  437,  437,  437,  437,  437,   43,  453,
      447,  447,  447,  447,   43,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  193,  437,  437,  437,   43,  437,
      437,  437,   43,   43,   43,   43,   43,   43,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  225,  437,  437,

      437,  437,   43,  447,  447,  447,  447,  437,  437,  193,
      437,  437,  437,   43,   43,   43,   43,   43,   43,  225,
      437,  437,  437,  437,   43,  447,  447,  447,   43,  454,
       43,   43,   43,   43,   43,  437,   43,  447,  455,  456,
       43,  437,   43,   43,   43,   43,   43,  437,   43,  447,
      455,  457,  456,  456,  437,  437,   43,   43,   43,   43,
      437,  437,   43,  447,  456,  437,   43,   43,   43,  437,
      458,  459,  437,  447,  456,  437,   43,   43,   43,  437,
      459,  437,  456,  437,   43,   43,   43,  437,  456,  437,
       43,  437,  460,   43,  437,  456,  437,  460,  437,   43,

      437,  456,  437,  437,  437,   43,  437,  456,  437,  437,
      456,  437,  437,  456,  437,  437,  456,  437,  437,  456,
      437,  437,  456,  437,  437,  456,  437,  437,  456,  437,
      461,  462,  463,  461,  462,  463,    0,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437
    } ;

static yyconst flex_int16_t yy_nxt[1790] =
    {   0,
       17,   18,   19,   18,   20,   21,   17,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   42,   42,
       42,   42,   43,   42,   42,   42,   42,   44,   17,   45,
       46,   47,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   48,   49,   50,   51,   17,   17,   17,   17,   17,
       17,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   63,   61,   63,   61,   62,   61,   76,   76,   62,
       66,   67,   68,   66,   67,   68,   83,   77,   77,   80,

       61,   80,   61,   63,   74,   62,  381,   69,   69,   91,
       69,   69,   85,   86,   64,   90,   64,   85,   92,   63,
       93,   93,   94,  150,  150,   85,  160,   95,  160,   84,
      109,  110,  111,   85,  433,   70,   64,  162,   70,   71,
       74,  102,   71,   72,   73,  437,   72,   73,   96,  437,
       97,   97,   64,   96,  431,  101,  101,  430,  103,  130,
      158,   98,  158,  131,   99,  159,   98,   99,  100,   99,
      428,  104,   99,  105,  106,   80,  107,   80,   98,  161,
      437,  437,   99,   98,  437,  437,  137,   99,  137,  437,
       99,  427,  100,  437,  163,   99,  113,  114,  115,  116,

      117,  117,  118,  119,  120,  122,  123,  124,  125,  126,
      126,  127,  128,  129,  437,  354,  176,  355,  437,  147,
      147,  147,  147,  147,  147,  122,  123,  124,  125,  126,
      126,  127,  128,  129,  148,  148,  148,  148,  202,  202,
      202,  202,  133,  149,  149,  149,  149,  149,  149,  437,
      134,  204,  204,  437,  135,  437,  139,  140,  141,  142,
      143,  143,  144,  145,  146,  151,  151,  151,  152,  153,
      153,  151,  151,  151,  154,  153,  153,  155,  155,  155,
      155,  155,  156,  156,  156,  156,  156,  156,  165,   83,
      166,  166,  178,  166,  437,  170,   83,   99,  213,  213,

       99,   88,   93,   93,  437,  167,  167,  396,  168,  168,
      171,  171,  425,  179,  180,   99,  180,  211,  211,  211,
      211,   89,   84,   99,  182,  182,  236,  236,  437,   84,
      179,  180,  437,  181,  180,  183,  184,  371,  184,  371,
      187,   96,  187,   97,   97,  188,  188,  170,   96,  408,
      101,  101,  183,  184,   98,  185,  184,  186,  250,  250,
      186,   98,  171,  171,   99,  221,  424,   99,  135,  188,
      188,   98,  222,  373,  158,  186,  158,  223,   98,  159,
      268,  268,   99,  186,  112,  112,  112,  112,  112,  112,
       99,  194,  195,  196,  197,  198,  198,  199,  200,  201,

      203,  203,  203,  203,  203,  203,  205,  205,  205,  206,
      207,  207,  208,  208,  208,  208,  208,  209,  209,  209,
      209,  209,  209,  121,  121,  121,  121,  121,  121,  212,
      212,  212,  212,  212,  212,  214,  214,  214,  215,  216,
      216,  217,  217,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  437,  437,  437,  437,  437,  437,  137,  437,
      137,  226,  227,  228,  229,  230,  230,  231,  232,  233,
      138,  138,  138,  138,  138,  138,  234,  234,  234,  234,
      235,  235,  235,  235,  235,  235,  237,  237,  237,  238,
      239,  239,  255,  402,  224,  240,  240,  240,  240,  240,

      291,  291,  220,  241,  241,  241,  241,  241,  241,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  422,  139,  140,
      141,  142,  143,  143,  144,  145,  146,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  244,
      245,  245,  245,  245,  245,  245,  246,  246,  246,  246,
      246,  246,  247,  247,  247,  247,  247,  247,  160,  160,
      160,  160,  437,  165,  437,  166,  437,  166,  256,  166,
      256,  170,  421,  257,  257,  437,  186,  182,  182,  186,

      167,  167,  250,  250,  168,  168,  171,  171,  258,  259,
      261,  259,  261,  437,  186,  262,  262,  265,  257,  257,
      265,  419,  186,  249,  418,  258,  259,  389,  260,  259,
      437,  161,  161,  188,  188,  265,  193,  193,  193,  193,
      193,  193,  437,  265,  423,  263,  437,  263,  194,  195,
      196,  197,  198,  198,  199,  200,  201,  266,  266,  266,
      266,  414,  263,  375,  264,  263,  267,  267,  267,  267,
      267,  267,  269,  269,  269,  270,  271,  271,  272,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      277,  277,  277,  277,  277,  277,  278,  278,  278,  278,
      278,  278,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  280,  280,  280,
      280,  280,  280,  281,  281,  281,  281,  281,  281,  282,
      282,  282,  282,  282,  282,  437,  437,  437,  416,  437,

      437,  437,  437,  437,  262,  262,  437,  437,  226,  227,
      228,  229,  230,  230,  231,  232,  233,  225,  225,  225,
      225,  225,  225,  289,  289,  289,  289,  295,  295,  295,
      295,  295,  283,  290,  290,  290,  290,  290,  290,  286,
      309,  309,  288,  415,  308,  413,  308,  284,  285,  309,
      309,  412,  287,  292,  292,  292,  293,  294,  294,  296,
      296,  296,  296,  296,  296,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,

      299,  299,  299,  299,  299,  299,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  437,  437,  257,  257,
      437,  437,  262,  262,  437,  410,  265,  437,  437,  265,
      180,  437,  180,  409,  184,  407,  184,  193,  193,  193,
      193,  193,  193,  399,  265,  403,  401,  180,  399,  181,
      180,  184,  265,  185,  184,  193,  193,  193,  193,  193,
      193,  310,  310,  310,  310,  310,  303,  314,  284,  193,
      193,  193,  193,  193,  193,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  311,  311,  311,
      311,  311,  311,  312,  312,  312,  312,  312,  312,  313,
      313,  313,  313,  313,  313,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  437,  437,  437,  437,  437,  437,  437,  437,  397,
      437,  395,  390,  388,  437,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  320,  320,  320,  320,  320,  320,  317,

      384,  318,  320,  320,  320,  320,  320,  315,  320,  320,
      320,  320,  320,  320,  316,  319,  321,  321,  321,  321,
      321,  321,  322,  322,  322,  322,  322,  322,  323,  323,
      323,  323,  323,  323,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  437,  165,  437,  166,  437,  437,  437,  382,
      380,  309,  309,  193,  193,  193,  193,  193,  193,  376,
      167,  167,  374,  259,  370,  259,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  437,  325,
      259,  437,  260,  259,  330,  437,  330,  437,  437,  437,

      329,  437,  437,  437,  437,  437,  426,  437,  437,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  332,  437,
      437,  331,  334,  437,  333,  437,  437,  437,  417,  437,
      437,  437,  437,  437,  437,  335,  437,  437,  437,  437,
      361,  383,  361,  437,  437,  341,  352,  354,  437,  355,
      355,  437,  355,  343,  437,  437,  437,  437,  437,  337,
      437,  437,  346,  345,  357,  344,  361,  362,  361,  432,
      420,  341,  347,  349,  365,  364,  358,  366,  437,  437,

      360,  356,  437,  437,  437,  359,  437,  404,  437,  404,
      437,  437,  369,  362,  363,  437,  341,  437,  437,  437,
      352,  437,  437,  437,  367,  368,  371,  392,  371,  392,
      437,  437,  372,  372,  437,  437,  393,  372,  372,  372,
      372,  372,  372,  437,  392,  379,  392,  372,  372,  372,
      377,  378,  385,  393,  391,  437,  437,  386,  437,  437,
      437,  350,  373,  394,  437,  372,  437,  405,  437,  404,
      437,  404,  387,  348,  340,  339,  338,  336,  328,  327,
      326,  324,  264,  260,  307,  306,  411,  372,  305,  372,
      304,  341,  302,  297,  274,  185,  181,  254,  253,  252,

      251,  429,  170,  248,  242,   89,  219,  400,  210,  192,
      191,  437,  177,  175,  174,  173,  406,  386,  172,  157,
      136,   85,  132,  108,  102,   85,   89,   87,   81,  405,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   88,   88,   88,   88,   88,

      437,   88,   88,   88,   88,   88,   88,   88,  112,  112,
      121,   79,  121,  121,  121,  138,   79,  138,  437,  437,
      437,  437,  437,  437,  138,  138,  164,  164,  437,  437,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  169,
      169,  437,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  189,  437,  437,  189,  190,  190,  190,  190,
      190,  190,  190,  190,  437,  190,  190,  190,  190,  193,
      437,  193,  193,  193,  225,  437,  437,  225,  225,  170,
      170,  437,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  342,  342,  342,  342,  342,  342,  437,  342,

      342,  342,  342,  342,  342,  351,  351,  437,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  353,  353,
      437,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  352,  352,  437,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  372,  437,  372,  372,  437,  437,
      437,  437,  437,  437,  437,  372,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  434,
      434,  437,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  435,  435,  437,  437,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  436,  436,  437,  437,  436,

      436,  436,  436,  436,  436,  436,  436,  436,   15,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437
    } ;

static yyconst flex_int16_t yy_chk[1790] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    5,    4,    9,    6,    4,    6,   11,   12,    6,
        7,    7,    7,    8,    8,    8,   21,   11,   12,   18,

       10,   18,   10,    6,    9,   10,  459,    7,    7,   30,
        8,    8,   22,   22,    5,   28,    9,   30,   30,   10,
       31,   31,   32,   55,   55,   28,   62,   32,   62,   21,
       39,   39,   39,   32,  430,    7,    6,   63,    8,    7,
       10,   63,    8,    7,    7,   64,    8,    8,   33,   64,
       33,   33,   10,   34,  428,   34,   34,  427,   37,   43,
       61,   33,   61,   43,   33,   61,   34,   33,   33,   34,
      425,   37,   34,   37,   37,   80,   37,   80,   33,   62,
       74,  121,   33,   34,   74,  121,   51,   34,   51,  147,
       33,  424,   33,  147,   64,   34,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   47,  340,   74,  340,   47,   52,
       52,   52,   52,   52,   52,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   53,   53,   53,   53,  114,  114,
      114,  114,   47,   54,   54,   54,   54,   54,   54,  243,
       47,  116,  116,  243,   47,  389,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   56,   56,   56,   56,   56,
       56,   57,   57,   57,   57,   57,   57,   58,   58,   58,
       58,   58,   59,   59,   59,   59,   59,   59,   66,   82,
       66,   68,   88,   68,   89,   69,  130,   99,  125,  125,

       99,   89,   93,   93,  402,   66,   66,  389,   68,   68,
       69,   69,  422,   93,   93,   99,   93,  123,  123,  123,
      123,   88,   82,   99,   96,   96,  142,  142,  134,  130,
       93,   93,  134,   93,   93,   96,   96,  371,   96,  371,
       98,   97,   98,   97,   97,   98,   98,  167,  101,  402,
      101,  101,   96,   96,   97,   96,   96,   97,  168,  168,
       97,  101,  167,  167,  101,  134,  421,  101,  134,  187,
      187,   97,  134,  371,  158,   97,  158,  134,  101,  158,
      197,  197,  101,   97,  113,  113,  113,  113,  113,  113,
      101,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      115,  115,  115,  115,  115,  115,  117,  117,  117,  117,
      117,  117,  118,  118,  118,  118,  118,  119,  119,  119,
      119,  119,  119,  122,  122,  122,  122,  122,  122,  124,
      124,  124,  124,  124,  124,  126,  126,  126,  126,  126,
      126,  127,  127,  127,  127,  127,  128,  128,  128,  128,
      128,  128,  133,  135,  396,  176,  133,  135,  137,  176,
      137,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
      141,  141,  141,  141,  141,  141,  143,  143,  143,  143,
      143,  143,  176,  396,  135,  144,  144,  144,  144,  144,

      229,  229,  133,  145,  145,  145,  145,  145,  145,  148,
      148,  148,  148,  148,  148,  149,  149,  149,  149,  149,
      149,  150,  150,  150,  150,  150,  150,  419,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  151,  151,  151,
      151,  151,  151,  152,  152,  152,  152,  152,  153,  153,
      153,  153,  153,  153,  154,  154,  154,  154,  154,  154,
      155,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  157,  157,  157,  157,  157,  157,  159,  160,
      159,  160,  163,  165,  383,  165,  163,  166,  179,  166,
      179,  171,  418,  179,  179,  420,  186,  182,  182,  186,

      165,  165,  250,  250,  166,  166,  171,  171,  182,  182,
      183,  182,  183,  365,  186,  183,  183,  189,  256,  256,
      189,  416,  186,  163,  415,  182,  182,  383,  182,  182,
      411,  159,  160,  188,  188,  189,  194,  194,  194,  194,
      194,  194,  279,  189,  420,  188,  279,  188,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  195,  195,  195,
      195,  411,  188,  365,  188,  188,  196,  196,  196,  196,
      196,  196,  198,  198,  198,  198,  198,  198,  199,  199,
      199,  199,  199,  200,  200,  200,  200,  200,  200,  202,
      202,  202,  202,  202,  202,  203,  203,  203,  203,  203,

      203,  204,  204,  204,  204,  204,  204,  205,  205,  205,
      205,  205,  205,  206,  206,  206,  206,  206,  207,  207,
      207,  207,  207,  207,  208,  208,  208,  208,  208,  208,
      209,  209,  209,  209,  209,  209,  210,  210,  210,  210,
      210,  210,  211,  211,  211,  211,  211,  211,  212,  212,
      212,  212,  212,  212,  213,  213,  213,  213,  213,  213,
      214,  214,  214,  214,  214,  214,  215,  215,  215,  215,
      215,  216,  216,  216,  216,  216,  216,  217,  217,  217,
      217,  217,  217,  218,  218,  218,  218,  218,  218,  219,
      219,  219,  219,  219,  219,  220,  221,  222,  413,  220,

      221,  222,  223,  224,  261,  261,  223,  224,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  226,  226,  226,
      226,  226,  226,  227,  227,  227,  227,  231,  231,  231,
      231,  231,  220,  228,  228,  228,  228,  228,  228,  222,
      308,  308,  224,  412,  258,  410,  258,  221,  221,  258,
      258,  409,  223,  230,  230,  230,  230,  230,  230,  232,
      232,  232,  232,  232,  232,  234,  234,  234,  234,  234,
      234,  235,  235,  235,  235,  235,  235,  236,  236,  236,
      236,  236,  236,  237,  237,  237,  237,  237,  237,  238,
      238,  238,  238,  238,  239,  239,  239,  239,  239,  239,

      240,  240,  240,  240,  240,  240,  241,  241,  241,  241,
      241,  241,  242,  242,  242,  242,  242,  242,  245,  245,
      245,  245,  245,  245,  246,  246,  246,  246,  246,  246,
      247,  247,  247,  247,  247,  247,  249,  255,  257,  257,
      249,  255,  262,  262,  283,  407,  265,  341,  283,  265,
      257,  341,  257,  403,  262,  401,  262,  266,  266,  266,
      266,  266,  266,  398,  265,  397,  395,  257,  393,  257,
      257,  262,  265,  262,  262,  267,  267,  267,  267,  267,
      267,  270,  270,  270,  270,  270,  249,  283,  255,  268,
      268,  268,  268,  268,  268,  269,  269,  269,  269,  269,

      269,  271,  271,  271,  271,  271,  271,  272,  272,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  274,
      274,  274,  274,  274,  274,  276,  276,  276,  276,  276,
      276,  277,  277,  277,  277,  277,  277,  278,  278,  278,
      278,  278,  278,  280,  280,  280,  280,  280,  280,  281,
      281,  281,  281,  281,  281,  282,  282,  282,  282,  282,
      282,  284,  285,  286,  287,  284,  285,  286,  287,  390,
      288,  388,  384,  380,  288,  289,  289,  289,  289,  289,
      289,  290,  290,  290,  290,  290,  290,  291,  291,  291,
      291,  291,  291,  292,  292,  292,  292,  292,  292,  286,

      376,  287,  293,  293,  293,  293,  293,  284,  294,  294,
      294,  294,  294,  294,  285,  288,  295,  295,  295,  295,
      295,  295,  296,  296,  296,  296,  296,  296,  297,  297,
      297,  297,  297,  297,  299,  299,  299,  299,  299,  299,
      300,  300,  300,  300,  300,  300,  301,  301,  301,  301,
      301,  301,  303,  305,  314,  305,  303,  423,  314,  373,
      370,  309,  309,  311,  311,  311,  311,  311,  311,  366,
      305,  305,  364,  309,  362,  309,  312,  312,  312,  312,
      312,  312,  313,  313,  313,  313,  313,  313,  353,  303,
      309,  316,  309,  309,  315,  316,  315,  317,  315,  318,

      314,  317,  315,  318,  319,  375,  423,  414,  319,  321,
      321,  321,  321,  321,  321,  322,  322,  322,  322,  322,
      322,  323,  323,  323,  323,  323,  323,  325,  329,  331,
      332,  325,  329,  331,  332,  333,  334,  429,  317,  333,
      334,  316,  318,  335,  317,  337,  343,  335,  414,  337,
      343,  417,  344,  345,  346,  319,  344,  345,  346,  347,
      348,  375,  348,  347,  349,  329,  351,  354,  349,  354,
      355,  357,  355,  331,  358,  357,  359,  360,  358,  325,
      359,  360,  334,  333,  343,  332,  361,  348,  361,  429,
      417,  346,  335,  337,  354,  350,  344,  355,  367,  368,

      347,  342,  367,  368,  369,  345,  378,  399,  369,  399,
      378,  377,  359,  361,  349,  377,  360,  379,  385,  387,
      339,  379,  385,  387,  357,  358,  363,  386,  363,  386,
      363,  386,  363,  363,  363,  386,  386,  363,  363,  363,
      363,  363,  363,  408,  392,  369,  392,  363,  363,  363,
      367,  368,  377,  392,  385,  391,  394,  378,  426,  391,
      394,  338,  363,  387,  400,  363,  406,  399,  400,  404,
      406,  404,  379,  336,  328,  327,  326,  324,  307,  306,
      304,  302,  263,  259,  254,  253,  408,  363,  252,  363,
      251,  391,  248,  233,  201,  184,  180,  175,  174,  173,

      172,  426,  169,  161,  146,  131,  129,  394,  120,  110,
      105,   84,   77,   73,   72,   71,  400,  406,   70,   60,
       49,   46,   44,   38,   35,   27,   24,   23,   20,  404,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  443,  443,  443,  443,  443,

       15,  443,  443,  443,  443,  443,  443,  443,  444,  444,
      445,   14,  445,  445,  445,  446,   13,  446,    0,    0,
        0,    0,    0,    0,  446,  446,  447,  447,    0,    0,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  448,
      448,    0,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  449,    0,    0,  449,  450,  450,  450,  450,
      450,  450,  450,  450,    0,  450,  450,  450,  450,  451,
        0,  451,  451,  451,  452,    0,    0,  452,  452,  453,
      453,    0,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  454,  454,  454,  454,  454,  454,    0,  454,

      454,  454,  454,  454,  454,  455,  455,    0,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  456,  456,
        0,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  457,  457,    0,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  458,    0,  458,  458,    0,    0,
        0,    0,    0,    0,    0,  458,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  461,
      461,    0,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  462,  462,    0,    0,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  463,  463,    0,    0,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437
    } ;

extern int c_cs_cpp_parser_flex_debug;
int c_cs_cpp_parser_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up c_cs_cpp_parsertext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *c_cs_cpp_parsertext;
#line 1 "c_cs_cpp_parser.l"
/****************************************************************************
 **
 ** Copyright (C) see AUTHORS included in the packaging of this file.
 **                ---   All rights reserved ---
 **
 ** This file may be distributed and/or modified under the terms of the
 ** GNU General Public License version 3 as published by the Free Software
 ** Foundation and appearing in the file LICENSE.TXT included in the
 ** packaging of this file.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ** Contact info@testcocoon.org if any conditions of this licensing are
 ** not clear to you.
 **
 ****************************************************************************/
/*%option outfile="lex.yy.c"*/
/*%option fast*/
/*%option nounistd*/
/* [\xEE-\xEF][\x80-\xBF][\x80-\xBF] - UTF8_BYTE_ORDER_MARK */
#line 58 "c_cs_cpp_parser.l"
#include <string.h>
#include <stdio.h>
#include <list>
#include "coveragescannerpdef.h"
#include "parsemisc.h"
#include "compilerinterface.h"
#include "c_cs_cpp_parser.h"
#ifdef __GNUC__
#define yyunput __attribute__ ((unused)) yyunput
#define yy_top_state __attribute__ ((unused)) yy_top_state
#endif
static int (*yy_input)(char *,int)=NULL;
FILE *test_input_file=NULL;
#define YY_INPUT(buf,result,max_size) result=yy_input(buf,max_size)
extern void *source_p;
extern void *expressions_p;
int bracket_level=0;
#define yyinput input
#define yylval c_cs_cpp_parserlval
#define yylloc c_cs_cpp_parserlloc
extern YYLTYPE yylloc;
extern YYSTYPE yylval;
bool in_template_definition=false;
static bool ignore_file=false;
static bool ignore_define=false;
static CompilerInterface::extension_t parse_language=CompilerInterface::EXT_SOURCE_C;
static std::list<bool> ignore_brackets;
static inline int token_for(const char *lexeme,CompilerInterface::extension_t);
static inline int return_a_token() { return !(ignore_file || ignore_define) ; }
#define RETURN_TOKEN(X) { if (return_a_token()) return X; }
#define PUSH_STATE(X) { DEBUG2("yy_push_state:%s\n",#X); yy_push_state(X); }
#define POP_STATE() { DEBUG1("yy_pop_state\n"); yy_pop_state(); }

#line 1118 "c_cs_cpp_parser_lex_debug.cxx"

#define INITIAL 0
#define PARSE_C 1
#define PARSE_CPP 2
#define PREPROCESSOR 3
#define PARSE_CS 4
#define COMMENT 5
#define LINE_COMMENT 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int c_cs_cpp_parserlex_destroy (void );

int c_cs_cpp_parserget_debug (void );

void c_cs_cpp_parserset_debug (int debug_flag  );

YY_EXTRA_TYPE c_cs_cpp_parserget_extra (void );

void c_cs_cpp_parserset_extra (YY_EXTRA_TYPE user_defined  );

FILE *c_cs_cpp_parserget_in (void );

void c_cs_cpp_parserset_in  (FILE * in_str  );

FILE *c_cs_cpp_parserget_out (void );

void c_cs_cpp_parserset_out  (FILE * out_str  );

int c_cs_cpp_parserget_leng (void );

char *c_cs_cpp_parserget_text (void );

int c_cs_cpp_parserget_lineno (void );

void c_cs_cpp_parserset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int c_cs_cpp_parserwrap (void );
#else
extern int c_cs_cpp_parserwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( c_cs_cpp_parsertext, c_cs_cpp_parserleng, 1, c_cs_cpp_parserout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( c_cs_cpp_parserin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( c_cs_cpp_parserin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, c_cs_cpp_parserin))==0 && ferror(c_cs_cpp_parserin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(c_cs_cpp_parserin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int c_cs_cpp_parserlex (void);

#define YY_DECL int c_cs_cpp_parserlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after c_cs_cpp_parsertext and c_cs_cpp_parserleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( c_cs_cpp_parserleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(c_cs_cpp_parsertext[c_cs_cpp_parserleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 93 "c_cs_cpp_parser.l"

                      /***** Preprocessor *****/
#line 1322 "c_cs_cpp_parser_lex_debug.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)c_cs_cpp_parseralloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parserlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! c_cs_cpp_parserin )
			c_cs_cpp_parserin = stdin;

		if ( ! c_cs_cpp_parserout )
			c_cs_cpp_parserout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			c_cs_cpp_parserensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				c_cs_cpp_parser_create_buffer(c_cs_cpp_parserin,YY_BUF_SIZE );
		}

		c_cs_cpp_parser_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of c_cs_cpp_parsertext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 438 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1709 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 95 "c_cs_cpp_parser.l"
{ process_pragma_coveragescanner(true,c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 96 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); PUSH_STATE(PREPROCESSOR); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 97 "c_cs_cpp_parser.l"
{ process_return(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc);  ignore_define=preprocessor_ignore_area(); POP_STATE(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "c_cs_cpp_parser.l"
{ process_pragma_coveragescanner(false,c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 99 "c_cs_cpp_parser.l"
{ push_instrumentation_option(yylloc.first_line,instrumentation_option(yylloc.first_line)) ;;process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc);  /* ignore */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "c_cs_cpp_parser.l"
{ pop_instrumentation_option(yylloc.first_line) ; process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); /* ignore */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "c_cs_cpp_parser.l"
{ extract_name_preprocessor_line(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc,ignore_file); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "c_cs_cpp_parser.l"
{ process_pragma(PRAGMA_UNHANDLED,false,c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "c_cs_cpp_parser.l"
{   process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); preprocessor_parse(c_cs_cpp_parsertext) ;   ignore_define=preprocessor_ignore_area(); POP_STATE(); /* ignore */ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 104 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); ; /* ignore */ }
	YY_BREAK
/***** Comments *****/
case 11:
YY_RULE_SETUP
#line 107 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); PUSH_STATE(COMMENT); }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 108 "c_cs_cpp_parser.l"
{ process_return(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); ; /* ignore */ }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 109 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); POP_STATE(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "c_cs_cpp_parser.l"
{process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); /*extract_name_preprocessor_borland(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc,&ignore_file); */}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); PUSH_STATE(LINE_COMMENT); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 113 "c_cs_cpp_parser.l"
{ process_return(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); POP_STATE(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); ; /* ignore */ }
	YY_BREAK
/***** C/C++/C# parser  ******/
case 18:
YY_RULE_SETUP
#line 117 "c_cs_cpp_parser.l"
{ skip_attribute(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 119 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_ASM_MS_LINE_); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_IDENTIFIER_); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_IDENTIFIER_); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 124 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 125 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 126 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 127 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 131 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 133 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 135 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_AND_OP_); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_OR_OP_); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(':'); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(';'); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('='); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('!'); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 141 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 142 "c_cs_cpp_parser.l"
{ if (in_template_definition) { REJECT; } process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 143 "c_cs_cpp_parser.l"
{ if (in_template_definition) { REJECT; } process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 144 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 145 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('<'); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 146 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('>'); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 147 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 148 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 149 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 150 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 151 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 152 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('='); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 153 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('='); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 154 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('='); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 155 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('('); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 156 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(')'); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 157 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('['); }
	YY_BREAK
case 53:
/* rule 53 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up c_cs_cpp_parsertext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up c_cs_cpp_parsertext again */
YY_RULE_SETUP
#line 158 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('['); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(']'); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 160 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 161 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); ignore_brackets.push_back(true); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 162 "c_cs_cpp_parser.l"
{ bracket_level++; process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); ignore_brackets.push_back(false); RETURN_TOKEN('{'); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 163 "c_cs_cpp_parser.l"
{ bracket_level--; process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); if (ignore_brackets.empty()) { RETURN_TOKEN('}'); } bool ignore=ignore_brackets.back() ; ignore_brackets.pop_back() ; if (!ignore) { RETURN_TOKEN('}'); } }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 164 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(','); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 165 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN('?'); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 166 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_QUALIF_); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 167 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 168 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 169 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOME_BINARY_OPERATOR_); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 170 "c_cs_cpp_parser.l"
{ }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); int token=token_for(c_cs_cpp_parsertext,parse_language); if (token!=_TOKEN_TO_IGNORE_) { RETURN_TOKEN(token); } }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_IDENTIFIER_); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 173 "c_cs_cpp_parser.l"
{ process_spaces(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 174 "c_cs_cpp_parser.l"
{ process_return(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 175 "c_cs_cpp_parser.l"
{ process_token(c_cs_cpp_parsertext,c_cs_cpp_parserleng,&yylval,&yylloc); RETURN_TOKEN(_SOMETHING_); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 177 "c_cs_cpp_parser.l"
ECHO;
	YY_BREAK
#line 1784 "c_cs_cpp_parser_lex_debug.cxx"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(PARSE_C):
			case YY_STATE_EOF(PARSE_CPP):
			case YY_STATE_EOF(PREPROCESSOR):
			case YY_STATE_EOF(PARSE_CS):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(LINE_COMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed c_cs_cpp_parserin at a new source and called
			 * c_cs_cpp_parserlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = c_cs_cpp_parserin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( c_cs_cpp_parserwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * c_cs_cpp_parsertext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of c_cs_cpp_parserlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			c_cs_cpp_parserrestart(c_cs_cpp_parserin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) c_cs_cpp_parserrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 438 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 438 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 437);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up c_cs_cpp_parsertext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					c_cs_cpp_parserrestart(c_cs_cpp_parserin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( c_cs_cpp_parserwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve c_cs_cpp_parsertext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void c_cs_cpp_parserrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        c_cs_cpp_parserensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            c_cs_cpp_parser_create_buffer(c_cs_cpp_parserin,YY_BUF_SIZE );
	}

	c_cs_cpp_parser_init_buffer(YY_CURRENT_BUFFER,input_file );
	c_cs_cpp_parser_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void c_cs_cpp_parser_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		c_cs_cpp_parserpop_buffer_state();
	 *		c_cs_cpp_parserpush_buffer_state(new_buffer);
     */
	c_cs_cpp_parserensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	c_cs_cpp_parser_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (c_cs_cpp_parserwrap()) processing, but the only time this flag
	 * is looked at is after c_cs_cpp_parserwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void c_cs_cpp_parser_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	c_cs_cpp_parserin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE c_cs_cpp_parser_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) c_cs_cpp_parseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parser_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) c_cs_cpp_parseralloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parser_create_buffer()" );

	b->yy_is_our_buffer = 1;

	c_cs_cpp_parser_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with c_cs_cpp_parser_create_buffer()
 * 
 */
    void c_cs_cpp_parser_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		c_cs_cpp_parserfree((void *) b->yy_ch_buf  );

	c_cs_cpp_parserfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a c_cs_cpp_parserrestart() or at EOF.
 */
    static void c_cs_cpp_parser_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	c_cs_cpp_parser_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then c_cs_cpp_parser_init_buffer was _probably_
     * called from c_cs_cpp_parserrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void c_cs_cpp_parser_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		c_cs_cpp_parser_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void c_cs_cpp_parserpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	c_cs_cpp_parserensure_buffer_stack();

	/* This block is copied from c_cs_cpp_parser_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from c_cs_cpp_parser_switch_to_buffer. */
	c_cs_cpp_parser_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void c_cs_cpp_parserpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	c_cs_cpp_parser_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		c_cs_cpp_parser_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void c_cs_cpp_parserensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)c_cs_cpp_parseralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parserensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)c_cs_cpp_parserrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parserensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE c_cs_cpp_parser_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) c_cs_cpp_parseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parser_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	c_cs_cpp_parser_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to c_cs_cpp_parserlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       c_cs_cpp_parser_scan_bytes() instead.
 */
YY_BUFFER_STATE c_cs_cpp_parser_scan_string (yyconst char * yystr )
{
    
	return c_cs_cpp_parser_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to c_cs_cpp_parserlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE c_cs_cpp_parser_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) c_cs_cpp_parseralloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in c_cs_cpp_parser_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = c_cs_cpp_parser_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in c_cs_cpp_parser_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) c_cs_cpp_parseralloc(new_size  );

		else
			(yy_start_stack) = (int *) c_cs_cpp_parserrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up c_cs_cpp_parsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		c_cs_cpp_parsertext[c_cs_cpp_parserleng] = (yy_hold_char); \
		(yy_c_buf_p) = c_cs_cpp_parsertext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		c_cs_cpp_parserleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int c_cs_cpp_parserget_lineno  (void)
{
        
    return c_cs_cpp_parserlineno;
}

/** Get the input stream.
 * 
 */
FILE *c_cs_cpp_parserget_in  (void)
{
        return c_cs_cpp_parserin;
}

/** Get the output stream.
 * 
 */
FILE *c_cs_cpp_parserget_out  (void)
{
        return c_cs_cpp_parserout;
}

/** Get the length of the current token.
 * 
 */
int c_cs_cpp_parserget_leng  (void)
{
        return c_cs_cpp_parserleng;
}

/** Get the current token.
 * 
 */

char *c_cs_cpp_parserget_text  (void)
{
        return c_cs_cpp_parsertext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void c_cs_cpp_parserset_lineno (int  line_number )
{
    
    c_cs_cpp_parserlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see c_cs_cpp_parser_switch_to_buffer
 */
void c_cs_cpp_parserset_in (FILE *  in_str )
{
        c_cs_cpp_parserin = in_str ;
}

void c_cs_cpp_parserset_out (FILE *  out_str )
{
        c_cs_cpp_parserout = out_str ;
}

int c_cs_cpp_parserget_debug  (void)
{
        return c_cs_cpp_parser_flex_debug;
}

void c_cs_cpp_parserset_debug (int  bdebug )
{
        c_cs_cpp_parser_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from c_cs_cpp_parserlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    c_cs_cpp_parserin = stdin;
    c_cs_cpp_parserout = stdout;
#else
    c_cs_cpp_parserin = (FILE *) 0;
    c_cs_cpp_parserout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * c_cs_cpp_parserlex_init()
     */
    return 0;
}

/* c_cs_cpp_parserlex_destroy is for both reentrant and non-reentrant scanners. */
int c_cs_cpp_parserlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		c_cs_cpp_parser_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		c_cs_cpp_parserpop_buffer_state();
	}

	/* Destroy the stack itself. */
	c_cs_cpp_parserfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        c_cs_cpp_parserfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    c_cs_cpp_parserfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * c_cs_cpp_parserlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *c_cs_cpp_parseralloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *c_cs_cpp_parserrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void c_cs_cpp_parserfree (void * ptr )
{
	free( (char *) ptr );	/* see c_cs_cpp_parserrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 177 "c_cs_cpp_parser.l"



typedef struct name_value_c_cpp {
  const char *name;
  int value_cpp;
  int value_c;
  int value_cs;
} name_value_c_cpp;
static struct name_value_c_cpp const keywords_c_cpp [] = { 
  /* This list must remain sorted!!! */
/* keyword         , C++               , C                 , C#  */
  {"__asm"         , _ASM_             , _ASM_             , _IDENTIFIER_                     } ,
  {"__asm__"       , _ASM_             , _ASM_             , _IDENTIFIER_                     } ,
  {"__except"      , _CATCH_           , _IDENTIFIER_      , _IDENTIFIER_                     } ,
  {"__extension__" , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_ , _IDENTIFIER_                     } ,
  {"__finally"     , _FINALLY_         , _IDENTIFIER_      , _IDENTIFIER_                     } ,
  {"__stdcall"     , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_ , _IDENTIFIER_                     } ,
  {"__try"         , _TRY_             , _IDENTIFIER_      , _IDENTIFIER_                     } ,
  {"__volatile"    , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_ , _IDENTIFIER_                     } ,
  {"__volatile__"  , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_ , _IDENTIFIER_                     } ,
  {"as"            , _IDENTIFIER_      , _IDENTIFIER_      , _SOME_BINARY_OPERATOR_           } ,
  {"asm"           , _ASM_             , _ASM_             , _IDENTIFIER_                     } ,
  {"break"         , _BREAK_           , _BREAK_           , _BREAK_                          } ,
  {"case"          , _CASE_            , _CASE_            , _CASE_                           } ,
  {"catch"         , _CATCH_           , _IDENTIFIER_      , _CATCH_                          } ,
  {"checked"       , _IDENTIFIER_      , _IDENTIFIER_      , _UNSAFE_                         } ,
  {"class"         , _STRUCT_          , _IDENTIFIER_      , _STRUCT_                         } ,
  {"const"         , _SOMETHING_       , _SOMETHING_       , _SOMETHING_                      } ,
  {"continue"      , _CONTINUE_        , _CONTINUE_        , _CONTINUE_                       } ,
  {"default"       , _DEFAULT_         , _DEFAULT_         , _DEFAULT_                        } ,
  {"delegate"      , _IDENTIFIER_      , _IDENTIFIER_      , _DELEGATE_                       } ,
  {"do"            , _DO_              , _DO_              , _DO_                             } ,
  {"else"          , _ELSE_            , _ELSE_            , _ELSE_                           } ,
  {"explicit"      , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"extern"        , _EXTERN_          , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_                } ,
  {"finally"       , _IDENTIFIER_      , _IDENTIFIER_      , _FINALLY_                        } ,
  {"for"           , _FOR_             , _FOR_             , _FOR_                            } ,
  {"foreach"       , _IDENTIFIER_      , _IDENTIFIER_      , _FOREACH_                        } ,
  {"get"           , _IDENTIFIER_      , _IDENTIFIER_      , _SET_GET_                        } ,
  {"goto"          , _GOTO_            , _GOTO_            , _GOTO_                           } ,
  {"if"            , _IF_              , _IF_              , _IF_                             } ,
  {"implicit"      , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"interface"     , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"internal"      , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"is"            , _IDENTIFIER_      , _IDENTIFIER_      , _SOME_BINARY_OPERATOR_           } ,
  {"lock"          , _IDENTIFIER_      , _IDENTIFIER_      , _LOCK_                           } ,
  {"namespace"     , _STRUCT_          , _IDENTIFIER_      , _STRUCT_                         } ,
  {"override"      , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"partial"       , _IDENTIFIER_      , _IDENTIFIER_      , _UNSAFE_                         } ,
  {"private"       , _PRIVATE_         , _IDENTIFIER_      , _PRIVATE_                        } ,
  {"protected"     , _PRIVATE_         , _IDENTIFIER_      , _PRIVATE_                        } ,
  {"public"        , _PRIVATE_         , _IDENTIFIER_      , _PRIVATE_                        } ,
  {"readonly"      , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"return"        , _RETURN_          , _RETURN_          , _RETURN_                         } ,
  {"sealed"        , _IDENTIFIER_      , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"set"           , _IDENTIFIER_      , _IDENTIFIER_      , _SET_GET_                        } ,
  {"static"        , _STATIC_          , _STATIC_          , _STATIC_                         } ,
  {"struct"        , _STRUCT_          , _STRUCT_          , _STRUCT_                         } ,
  {"switch"        , _SWITCH_          , _SWITCH_          , _SWITCH_                         } ,
  {"throw"         , _THROW_           , _IDENTIFIER_      , _THROW_                          } ,
  {"try"           , _TRY_             , _IDENTIFIER_      , _TRY_                            } ,
  {"typedef"       , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_ , _IDENTIFIER_                     } ,
  {"unchecked"     , _IDENTIFIER_      , _IDENTIFIER_      , _UNSAFE_                         } ,
  {"union"         , _STRUCT_          , _STRUCT_          , _IDENTIFIER_                     } ,
  {"unsafe"        , _IDENTIFIER_      , _IDENTIFIER_      , _UNSAFE_                         } ,
  {"using"         , _TOKEN_TO_IGNORE_ , _IDENTIFIER_      , _USING_                          } ,
  {"virtual"       , _TOKEN_TO_IGNORE_ , _IDENTIFIER_      , _TOKEN_TO_IGNORE_                } ,
  {"volatile"      , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_ , _TOKEN_TO_IGNORE_                } ,
  {"while"         , _WHILE_           , _WHILE_           , _WHILE_                          } ,
  {"yield"         , _IDENTIFIER_      , _IDENTIFIER_      , _YIELD_                          } ,
};    


/* Conduct a binary search for lexeme in the keywords array
 * between indices start (inclusive) and finish (exclusive)
 */
static const name_value_c_cpp * bin_search(const char *lexeme, int start, int finish)
{
  if (start >= finish)  /* Not found */
      return NULL;
  else {
    int mid = (start+finish)/2;
    int cmp = strcmp(lexeme,keywords_c_cpp[mid].name);
    if (cmp == 0) 
      return &keywords_c_cpp[mid];
    else if (cmp < 0)
      return bin_search(lexeme,start,mid);
    else
      return bin_search(lexeme,mid+1,finish);
  }
}

#ifndef NO_DEBUG
static const name_value_c_cpp * simple_search(const char *lexeme, int start, int finish)
{
  for (int i=start;i<finish;i++)
  {
    if (strcmp(lexeme,keywords_c_cpp[i].name)==0)
      return &keywords_c_cpp[i];
  }
  return NULL;
}
#endif

int token_for(const char *lexeme,CompilerInterface::extension_t parse_language)
{
  static int num_keywords = sizeof(keywords_c_cpp) / sizeof(name_value_c_cpp);
  const name_value_c_cpp *token = bin_search(lexeme,0,num_keywords);
  ASSERT(token==simple_search(lexeme,0,num_keywords));
  if (token)
  {
    switch (parse_language)
    {
      default:
        FATAL1("Wrong language to parse\n");
      case CompilerInterface::EXT_SOURCE_C:   return token->value_c;
      case CompilerInterface::EXT_SOURCE_CPP: return token->value_cpp;
      case CompilerInterface::EXT_SOURCE_CS:  return token->value_cs;
    }
  }
  return _IDENTIFIER_;
}


int
c_cs_cpp_parserwrap()
{
	return(1);
}

static int yy_input_std(char *buf,int max_size)
{
  int result;
  if ( (result = fread( (char *) buf,1, max_size,test_input_file )) < 0 ) 
  {
    FATAL1("Error reading source file");
  }
  return result;
}

void init_c_cs_cpp_parserlex(CompilerInterface::extension_t _parse_language, int (*yy_input_func)(char *,int),const char *filename_orig)
{
  bracket_level=0;
  ignore_brackets.clear();
  in_template_definition=false;
  for (int i=1;i<(int)(sizeof(keywords_c_cpp) / sizeof(name_value_c_cpp));i++)
  {
    if (strcmp(keywords_c_cpp[i].name,keywords_c_cpp[i-1].name)<=0)
    {
      FATAL3("Internal error: table not sorted (%s<%s)",keywords_c_cpp[i].name,keywords_c_cpp[i-1].name);
    }
  }
  if (yy_input_func)
    yy_input=yy_input_func;
  else
    yy_input=yy_input_std;
  ignore_file=false;
  ignore_define=false;
  parse_language=_parse_language;
  switch (parse_language)
  {
    case CompilerInterface::EXT_SOURCE_CPP:
      DEBUG1("Parsing C++ code\n");
      BEGIN(PARSE_CPP);
      break;
    case CompilerInterface::EXT_SOURCE_CS: 
      DEBUG1("Parsing C# code\n");
      BEGIN(PARSE_CS);
      break;
    case CompilerInterface::EXT_SOURCE_C:  
      DEBUG1("Parsing C code\n");
      BEGIN(PARSE_C);
      break;
    default:
      FATAL1("Wrong language to parse\n");
  }

  init_parser_lex(input,sizeof(YYSTYPE),filename_orig);
}

void yyprint_token(FILE * f,const char * text)
{
  FUNCTION_TRACE;
  YYFPRINTF(f,"%li:%s:%li,%li %s ",line_absolute,filename,line,column,text);
}

CompilerInterface::extension_t language_to_parse()
{
  return parse_language;
}

